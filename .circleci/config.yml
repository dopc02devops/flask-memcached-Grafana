version: 2.1

executors:
  machine_executor:
    machine:
      image: ubuntu-2204:current  # Use a full VM image (Ubuntu 22.04)
      docker_layer_caching: true  # Optional: Enable Docker layer caching for faster builds

commands:
  install_docker_compose:
    steps:
      - run:
          name: Install Docker Compose
          command: |
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Verify Docker Compose Installation
          command: docker-compose --version

jobs:
  install_dependencies:
    executor: machine_executor
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            
            # Update package lists and install dependencies
            sudo apt-get update
            
            # Install Python packages
            pip install pytest requests pylint

  test:
    executor: machine_executor
    steps:
      - checkout
      - install_docker_compose
      - run:
          name: Start Docker Daemon
          command: |
            sudo systemctl start docker  # Start Docker daemon in the machine executor
            sudo systemctl enable docker  # Enable Docker to start on boot
            sleep 5  # Wait for Docker daemon to fully initialize
      - run:
          name: Run Tests
          command: |
            docker volume create app_volume
            pip install pytest-html
            docker-compose -f docker-compose.test.yml up --build test-app || exit 1
      - run:
          name: Copy Test Reports
          command: |
            mkdir -p reports-xml
            mkdir -p reports-html
            docker cp flask-tests-container:/app/report.xml ./report.xml
            docker cp flask-tests-container:/app/report.html ./report.html

      - store_artifacts:
          path: ./report.xml
          destination: reports-xml

      - store_artifacts:
          path: ./report.html
          destination: reports-html


  build_docker_image:
    executor: machine_executor
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: |
            docker build -t $DOCKER_USERNAME/python-memcached:latest -f src/Dockerfile.app .
      - run:
          name: Push Docker Image
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push $DOCKER_USERNAME/python-memcached:latest



workflows:
  version: 2
  main_workflow:
    jobs:
      - install_dependencies
      - test
      - build_docker_image:
          requires:
            - test







#version: 2.1
#
#executors:
#  docker_executor:
#    docker:
#      - image: circleci/python:3.8
#      - image: docker:20.10.7
#    working_directory: ~/project
#    environment:
#      DOCKER_HOST: tcp://localhost:2375
#      DOCKER_TLS_VERIFY: 0
#
#jobs:
#  install_dependencies:
#    executor: docker_executor
#    steps:
#      - checkout
#      - run:
#          name: Install Dependencies
#          command: |
#            sudo apt-get update
#            sudo apt-get install -y python3-pip curl docker.io
#            pip install pytest requests pylint
#
#
#  test:
#    executor: docker_executor
#    steps:
#      - checkout
#      - run:
#          name: Install Docker Compose
#          command: |
#            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#            sudo chmod +x /usr/local/bin/docker-compose
#      - run:
#          name: Verify Installation
#          command: docker-compose --version
#
#      - run:
#          name: Run Tests
#          command: |
#            docker volume create app_volume
#            pip install pytest-html
#            docker-compose -f docker-compose.test.yml up --build test-app || exit 1
#
#      - run:
#          name: Copy Test Reports
#          command: |
#            docker cp flask-tests-container:/app/report.xml ./report.xml
#            docker cp flask-tests-container:/app/report.html ./report.html
#      - store_test_results:
#          path: report.xml  # Store test reports for CircleCI
#      - store_artifacts:
#          path: report.html  # Optional: Store test reports as artifacts
#
#  build_docker_image:
#    executor: docker_executor
#    steps:
#      - checkout
#      - run:
#          name: Build Docker Image
#          command: |
#            docker build -t your_docker_username/python-memcached:${CIRCLE_TAG} -f ./Dockerfile.app .
#      - run:
#          name: Push Docker Image
#          command: |
#            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
#            docker push your_docker_username/python-memcached:${CIRCLE_TAG}
#
#  deploy_test:
#    executor: docker_executor
#    steps:
#      - checkout
#      - run:
#          name: Deploy to Test Environment
#          command: |
#            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa user@host \
#              "cd /path/to/project && docker-compose -f docker-compose.env.yml up -d"
#
#  deploy_stage:
#    executor: docker_executor
#    steps:
#      - checkout
#      - run:
#          name: Setup kubectl
#          command: |
#            curl -LO "https://dl.k8s.io/release/v1.26.0/bin/linux/amd64/kubectl"
#            chmod +x ./kubectl
#            mv ./kubectl /usr/local/bin/kubectl
#      - run:
#          name: Deploy to Stage Environment
#          command: |
#            export KUBECONFIG=/path/to/kubeconfig
#            kubectl apply -f deployment/manifest-memcached/configmap-memcached.yaml -n stage
#            kubectl apply -f deployment/manifest-memcached/memcached-statefulset.yaml -n stage
#            kubectl rollout status statefulset/memcached -n stage
#
#
#workflows:
#  version: 2
#  deploy_pipeline:
#    jobs:
#      - install_dependencies
#      - test:
#          requires:
#            - install_dependencies
##      - build_docker_image:
##          requires:
##            - test
##      - deploy_test:
##          requires:
##            - build_docker_image
##      - deploy_stage:
##          requires:
##            - build_docker_image
