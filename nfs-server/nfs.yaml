# Namespace for storage resources
apiVersion: v1
kind: Namespace
metadata:
  name: storage
---
# NFS Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-server
  namespace: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-server
  template:
    metadata:
      labels:
        app: nfs-server
    spec:
      containers:
        - name: nfs-server
          image: itsthenetwork/nfs-server-alpine:latest
          ports:
            - name: nfs
              containerPort: 2049
            - name: mountd
              containerPort: 20048
            - name: rpcbind
              containerPort: 111
          securityContext:
            privileged: true
          env:
            - name: SHARED_DIRECTORY
              value: /nfsshare
          volumeMounts:
            - name: nfs-data
              mountPath: /nfsshare
      volumes:
        - name: nfs-data
          emptyDir: {}
---
# NFS Server Service (Headless)
apiVersion: v1
kind: Service
metadata:
  name: nfs-server
  namespace: storage
spec:
  ports:
    - name: nfs
      port: 2049
      protocol: TCP
    - name: mountd
      port: 20048
      protocol: TCP
    - name: rpcbind
      port: 111
      protocol: TCP
  selector:
    app: nfs-server
  clusterIP: None # Headless service for stable networking
---
# StorageClass for NFS Provisioner
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-provisioner
provisioner: nfs-provisioner.provisioner.k8s.io
reclaimPolicy: Retain
volumeBindingMode: WaitForFirstConsumer
---
# PersistentVolumeClaim for Flask App
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: flask-app-volume
  namespace: storage
spec:
  accessModes:
    - ReadWriteMany  # NFS supports ReadWriteMany
  resources:
    requests:
      storage: 1Gi
  storageClassName: nfs-provisioner  # Use the NFS provisioner for dynamic volume provisioning
